generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
}

model Domain {
  id         String @id @default(uuid())
  domainName String @unique

  name         String
  phone        String
  cep          String
  address      String
  cnpj         String?
  deliveryTime String

  User        User[]
  Categories  Category[]
  Products    Product[]
  Subsections Subsection[]
  Options     Option[]
  Schedules   Schedule[]

  @@map("domains")
}

model User {
  id            String @id @default(uuid())
  email         String @unique
  password_hash String
  role          Role   @default(ADMIN)

  domainId String?
  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  Products Product[]

  domainId String
  Domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("categories")
}

model Product {
  id String @id @default(uuid())

  img         String?
  name        String  @unique
  price       Float
  description String

  Subsections  Subsection[]

  categoryId String
  Category     Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  domainId String
  Domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Subsection {
  id   String @id @default(uuid())
  name String @unique

  multipleChoice Boolean
  limit          Int
  required       Boolean

  ProductId String
  Product     Product  @relation(fields: [ProductId], references: [id], onDelete: Cascade)
  Options     Option[]

  domainId String
  Domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("subsections")
}

model Option {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float

  SubsectionId String
  Subsection     Subsection @relation(fields: [SubsectionId], references: [id], onDelete: Cascade)

  domainId String
  Domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("options")
}

model Schedule {
  id  String @id @default(uuid())
  seg Json
  ter Json
  qua Json
  qui Json
  sex Json
  sab Json
  dom Json

  domainId String
  Domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("schedules")
}
